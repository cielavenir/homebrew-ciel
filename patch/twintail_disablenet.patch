diff -ur a/admin/inst-sysfunc.c b/admin/inst-sysfunc.c
--- a/admin/inst-sysfunc.c	2019-01-01 23:42:56.000000000 +0900
+++ b/admin/inst-sysfunc.c	2019-01-02 23:52:25.000000000 +0900
@@ -88,23 +88,6 @@
 	wr_dtab(GL_DTAB,"fprint"        ,'X',0,i_fprint     ,INVA);
 	wr_dtab(GL_DTAB,"sprint"        ,'X',0,i_sprint     ,INVA);
 	wr_dtab(GL_DTAB,"dying"         ,'X',0,i_dying      ,INVA);
-
-// Inet.Call: インターネット関数
-	wr_dtab(GL_DTAB,"ip2int"        ,'X',0,i_ip2int     ,INVA);
-	wr_dtab(GL_DTAB,"ip2str"        ,'X',0,i_ip2str     ,INVA);
-	wr_dtab(GL_DTAB,"port2int"      ,'X',0,i_port2int   ,INVA);
-	wr_dtab(GL_DTAB,"port2str"      ,'X',0,i_port2str   ,INVA);
-	wr_dtab(GL_DTAB,"sockinfo"      ,'X',0,i_sockinfo   ,INVA);
-	wr_dtab(GL_DTAB,"udp_socket"    ,'X',0,i_udp_socket ,INVA);
-	wr_dtab(GL_DTAB,"tx_udp"        ,'X',0,i_tx_udp     ,INVA);
-	wr_dtab(GL_DTAB,"rx_udp"        ,'X',0,i_rx_udp     ,INVA);
-	wr_dtab(GL_DTAB,"tcp_socket"    ,'X',0,i_tcp_socket ,INVA);
-	wr_dtab(GL_DTAB,"listen"        ,'X',0,i_listen     ,INVA);
-	wr_dtab(GL_DTAB,"connect"       ,'X',0,i_connect    ,INVA);
-	wr_dtab(GL_DTAB,"tx_tcp"        ,'X',0,i_tx_tcp     ,INVA);
-	wr_dtab(GL_DTAB,"rx_tcp"        ,'X',0,i_rx_tcp     ,INVA);
-	wr_dtab(GL_DTAB,"raw_socket"    ,'X',0,i_raw_socket ,INVA);
-	wr_dtab(GL_DTAB,"ping"          ,'X',0,i_ping       ,INVA);
                                           
 // Math.Call: 数学関数                   
 	wr_dtab(GL_DTAB,"sin"           ,'X',0,i_sin        ,1);
diff -ur a/main.c b/main.c
--- a/main.c	2019-01-01 23:42:55.000000000 +0900
+++ b/main.c	2019-01-02 23:51:04.000000000 +0900
@@ -75,12 +75,6 @@
 	gl_zone    = X_SDUP(tzname[0]);		/* Get  TM_ZONE            in General					*/
 	gl_gmtoff  = -timezone;				/* Get           TM_GMTOFF in General					*/
 
-/* Set Alarm Handler for Time Out */
-	s_action.sa_handler = net_alarmhandler;
-	if( sigfillset(&(s_action.sa_mask))   < 0 ){ dying("Master!! - Cannot init Signal for SIGALRM\n"); }
-	s_action.sa_flags   = 0;
-	if( sigaction(SIGALRM,&s_action,NULL) < 0 ){ dying("Master!! - Cannot init Signal for SIGALRM\n"); }
-
 /* Process Option(s) for TT-Engine */
 	for( idx=1 ; idx<argc ; idx++ ){	/* idx = 1,2,3, ... argc-1								*/
 
diff -ur a/main.h b/main.h
--- a/main.h	2019-01-01 23:42:55.000000000 +0900
+++ b/main.h	2019-01-03 00:15:29.000000000 +0900
@@ -46,13 +46,6 @@
 #include	<sys/types.h>				// POSIX Spec ( Defacto Standard )
 #include	<sys/wait.h>				// POSIX Spec ( Defacto Standard )
 
-#include	<netdb.h>					// TCP/IP Networking
-#include	<netinet/ip.h>				// TCP/IP Networking
-#include	<netinet/ip_icmp.h>			// TCP/IP Networking
-#include	<netinet/tcp.h>				// TCP/IP Networking
-#include	<netinet/udp.h>				// TCP/IP Networking
-#include	<arpa/inet.h>				// TCP/IP Networking
-
 #include	"gc.h"						// BoehmDW-GC
 #include	<readline/readline.h>		// GNU ReadLine()
 #include	<readline/history.h>		// GNU ReadLine()
diff -ur a/syntax/flex.l b/syntax/flex.l
--- a/syntax/flex.l	2019-01-01 23:42:55.000000000 +0900
+++ b/syntax/flex.l	2019-01-02 23:50:45.000000000 +0900
@@ -13,7 +13,6 @@
 %s			S_OPER S_IMED S_KEEP        INITIA
 
 int_cnst	[0-9]+
-ip_addr		[0-9]+[ \t]*(\.[ \t]*[0-9]+){3}
 
 hex_cnst	0[xX][0-9a-fA-F]+
 dec_cnst	0[dD][0-9]+
@@ -125,9 +124,6 @@
 '[^\\\n']'	{ f("Type=IMED(C)-New!!"); inst_imedint(             yytext[1]  ); set_p(); adj_i(S_OPER); return(IMED); }
 '\\[^\n]'	{ f("Type=IMED(C)-New!!"); inst_imedint(conv_esc2int(yytext[2]) ); set_p(); adj_i(S_OPER); return(IMED); }
 {int_cnst}	{ f("Type=IMED(I)-New!!"); inst_imedint(atol(yytext)            ); set_p(); adj_i(S_OPER); return(IMED); }
-{ip_addr}	{ f("Type=IMED(I)-New!!"); tint ip=str_iphn2tint(yytext);          set_p(); adj_i(S_OPER); /* For SlOC() */
-	if( ip<0 ){ flag_exerr=E_SCANER; msg_r("Error: illegal IP address (%s) %s" ,yytext, sloc(sx,yylineno)); return(0); }
-                                       inst_imedint(ip                      );                         return(IMED); }
 {dbl_cnst1}|{dbl_cnst2}|{dbl_cnst3}		{
               f("Type=IMED(D)-New!!"); inst_imeddbl(atof2(yytext)           ); set_p(); adj_i(S_OPER); return(IMED); }
 {hex_cnst}	{ f("Type=IMED(x)-New!!"); inst_imedint(strtol(yytext+2,NULL,16)); set_p(); adj_i(S_OPER); return(IMED); }
